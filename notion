import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from time import sleep

class VelocityPublisher(Node):
    def __init__(self):
        super().__init__('velocity_publisher')
        self.publisher_ = self.create_publisher(Twist, '/cmd_vel', 10)
        self.get_logger().info('Velocity Publisher Node has been started.')

    def publish_velocity(self, V, W, t):
        """
        Publishes linear and angular velocity for a specified duration.
        
        Args:
            V (float): Linear velocity in m/s.
            W (float): Angular velocity in rad/s.
            t (float): Duration for which to publish the velocities in seconds.
        """
        msg = Twist()
        msg.linear.x = V
        msg.angular.z = W

        start_time = self.get_clock().now().nanoseconds
        end_time = start_time + int(t * 1e9)

        self.get_logger().info(f"Publishing V={V} m/s, W={W} rad/s for {t} seconds.")
        while self.get_clock().now().nanoseconds < end_time:
            self.publisher_.publish(msg)
            sleep(0.1)  # Control loop frequency: 10 Hz

        # Stop the robot after publishing for `t` seconds
        msg.linear.x = 0.0
        msg.angular.z = 0.0
        self.publisher_.publish(msg)
        self.get_logger().info("Stopped publishing. Robot halted.")

def main(args=None):
    rclpy.init(args=args)
    node = VelocityPublisher()

    try:
        # Example cases
        node.publish_velocity(0.5, 0.2, 3)  # V=0.5 m/s, W=0.2 rad/s for 3 seconds
        node.publish_velocity(1.0, 0.0, 5)  # V=1.0 m/s, W=0.0 rad/s for 5 seconds
    except KeyboardInterrupt:
        pass

    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()